#
# Eduardo Stuani Solution(s) for Project Euler Problem Number 12
# https://github.com/stuaninauts
#
# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
# The first ten terms would be:
#
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number to have over five hundred divisors?
import itertools
import math


# Solution 1
def solve():
    t_number = 0

    for i in range(1, 65000):
        t_number += i

        if num_divisors(t_number) > 500:
            return t_number


# Return the number of divisors that x number has
# Not optimized version
# def num_divisors(x):
#     divs = 1
#     if x == 1:
#         return divs
#     for i in range(2, x):
#         if x % i == 0:
#             divs += 1
#     return divs

# Return the number of divisors that x number has
# Optimized version
def num_divisors(x):
    count = 1
    for i in range(2, int(math.sqrt(x)) + 1):
        if x % i == 0:
            count += 1
            other_div = x // i
            if other_div != i:
                count += 1
    count += 1
    return count


if __name__ == "__main__":
    print(solve())
